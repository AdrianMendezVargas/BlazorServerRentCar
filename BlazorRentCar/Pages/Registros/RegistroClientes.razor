@page "/registro-clientes"
@inject AppState AppState
@inject IToastService toast
@attribute [Authorize]

<AuthorizeView>

    <div class="container mt-3">
        <div class="card shadow-lg w-100">
            <div class="card-header bg-dark">
                <div class="form-row">
                    @if (!ModoSeleccionCliente) {
                        <div class="col-sm">
                            <h3 class="text-light"><i class="oi oi-person mr-3" />Clientes</h3>
                        </div>
                        <div class="col-sm">
                            <button class="btn btn-dark border-light" @onclick="AgregarCliente">
                                <i class="oi oi-plus" />
                                Agregar
                            </button>
                        </div>
                    }
                    <div class="col-sm">
                        <select @bind="indexSelect" class="custom-select">
                            <option value="0">Filtrar por</option>
                            <option value="1">Id</option>
                            <option value="2">Nombre</option>
                        </select>
                    </div>
                    <div class="col-sm">
                        <input class="form-control w-100" type="@(indexSelect == 1 ? "number" : "text")" @bind="criterioDeBusqueda" />
                    </div>
                    <div class="col-sm text-center">
                        <button class="btn btn-dark border-light" @onclick="FiltarClientes">
                            <i class="oi oi-magnifying-glass" />
                            Buscar
                        </button>
                    </div>
                </div>
            </div>
            <div class="card-body table-responsive">
                @if (Clientes == null) {
                    <div>
                        <h4>Cargando...</h4>
                    </div>
                } else {
                    <table class="table table-hover text-nowrap">
                        <thead class="thead-light">
                            <tr>
                                <th>Cliente Id</th>
                                <th>Nombre</th>
                                <th>Apellido</th>
                                <th>Email</th>
                                <th>Balance</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var cliente in Clientes) {
                            <tr>
                                <td>@cliente.ClienteId</td>
                                <td>@cliente.Nombres</td>
                                <td>@cliente.Apellidos</td>
                                <td>@cliente.Email</td>
                                <td>@cliente.Balance</td>
                                @if (!ModoSeleccionCliente) {
                                    <td><button @onclick="()=>ModificarCliente(cliente)" class="btn btn-outline-dark">Ver</button></td>
                                } else {
                                    <td><button @onclick="()=> RetornarCliente(cliente)" class="btn btn-outline-dark">Seleccionar</button></td>
                                }
                            </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <th colspan="5">
                                    <Paginas CambioPaginacion="CambioPaginacion"
                                             MostrarCantidadesPorPagina="!ModoSeleccionCliente"
                                             PaginasTotales="PaginasTotales"
                                             Paginacion="PaginacionActual"
                                             Radio="2" />
                                </th>
                            </tr>
                        </tfoot>
                    </table>
                }
            </div>
        </div>
    </div>



    @if (MostraDialogoEditor) {
        Title = EsNuevoCliente ? "Nuevo Cliente" : "Modificar Cliente";

        <Dialogo Title="@Title" OnClose="OcultarDialogo">
            <Body>
                <EditForm id="form-clientes" Model="clienteEnModificacion" OnValidSubmit="Guardar">
                    <ChildContent Context="EditContext">
                        <FieldsCliente Cliente="clienteEnModificacion" />
                        <DataAnnotationsValidator />
                    </ChildContent>
                </EditForm>
            </Body>
            <Footer>
                <button type="button" disabled="@(!EsNuevoCliente)" class="btn btn-warning" @onclick="Nuevo">Nuevo</button>
                <input type="submit" form="form-clientes" class="btn btn-success" value="Guardar" />
                <button type="button" disabled="@(EsNuevoCliente)" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
            </Footer>
        </Dialogo>
    }
</AuthorizeView>


@code {
    [Inject]
    public ClientesBLL ClientesBLL { get; set; }

    [Parameter] public bool ModoSeleccionCliente { get; set; }
    [Parameter] public EventCallback<Cliente> OnClienteSelected { get; set; }

    bool MostraDialogoEditor = false;
    bool EsNuevoCliente = false;
    string Title;

    Paginacion PaginacionActual = new Paginacion();
    int ClientesTotalesFiltrados;
    Expression<Func<Cliente , bool>> expressionFiltrado = c => true;
    int PaginasTotales;

    int indexSelect = 0; //indice actual del select
    string criterioDeBusqueda;

    Cliente clienteEnModificacion;
    public List<Cliente> Clientes { get; set; }

    protected async override Task OnInitializedAsync() {
        await RefrescarTabla();
    }

    void RetornarCliente(Cliente c) {
        OnClienteSelected.InvokeAsync(c);
    }

    async Task CambioPaginacion() {
        await RefrescarTabla();
    }

    async Task RefrescarTabla() {
        Clientes = await ClientesBLL.GetClientes(expressionFiltrado , PaginacionActual);
        ClientesTotalesFiltrados = await ClientesBLL.Contar(expressionFiltrado);
        GetPaginasTotales();
    }

    void GetPaginasTotales() {
        int paginasTotalesTemp = (int) Math.Ceiling((double) ClientesTotalesFiltrados / PaginacionActual.CantidadPorPagina);
        PaginasTotales = paginasTotalesTemp < 1 ? 1 : paginasTotalesTemp;
    }


    void ModificarCliente(Cliente cliente) {
        clienteEnModificacion = cliente;
        EsNuevoCliente = false;
        MostraDialogoEditor = true;
    }

    void AgregarCliente() {
        clienteEnModificacion = new Cliente(AppState.ClaimsPrincipal.Identity.Name);
        EsNuevoCliente = true;
        MostraDialogoEditor = true;
    }

    async Task OcultarDialogo() {
        MostraDialogoEditor = false;
        await RefrescarTabla();
        QuitarFiltros();
    }

    void QuitarFiltros() {
        indexSelect = 0;
        criterioDeBusqueda = "";
        _ = FiltarClientes();
    }

    void Nuevo() {
        clienteEnModificacion = new Cliente(AppState.ClaimsPrincipal.Identity.Name);
    }
    async Task Guardar() {

        bool guardo;

        guardo = await ClientesBLL.Guardar(clienteEnModificacion);

        if (guardo) {
            toast.ShowSuccess("Guardado ");
            Nuevo();
            await OcultarDialogo();
        } else
            toast.ShowError("Error al guardar");

    }

    async Task Eliminar() {
        bool eliminado;

        eliminado = await ClientesBLL.Eliminar(clienteEnModificacion.ClienteId);

        if (eliminado) {
            toast.ShowSuccess("Eliminado");
            Nuevo();
            await OcultarDialogo();
        } else
            toast.ShowError("Error al eliminar");
    }

    async Task FiltarClientes() {

        if (indexSelect == 0) {//Todos
            expressionFiltrado = c => true;

        } else if (indexSelect == 1) {//Id

            if (int.TryParse(criterioDeBusqueda , out int Id)) {
                expressionFiltrado = c => c.ClienteId == Id;
            } else {
                expressionFiltrado = c => true;
            }
        } else if (indexSelect == 2) {//Nombre
            expressionFiltrado = e => e.Nombres.ToLower().Contains(criterioDeBusqueda.ToLower());
        }
        PaginacionActual.Pagina = 1;
        await RefrescarTabla();
        StateHasChanged();
    }
}