@page "/consulta-rentas"
@inject AppState AppState
@inject IToastService toast
@attribute [Authorize]


<div class="container mt-3">
    <div class="card shadow-lg w-100">
        <div class="card-header bg-dark">
            <div class="form-row">

                <div class="col-sm">
                    <h3 class="text-light"><i class="fa fa-money-check mr-3" />Rentas</h3>
                </div>
                <div class="col-sm">
                    <a class="btn btn-dark border-light" href="registro-rentas">
                        <i class="oi oi-plus" />
                        Agregar
                    </a>
                </div>

                <div class="col-sm">
                    <select @bind="indexSelect" class="custom-select">
                        <option value="0">Filtrar por</option>
                        <option value="1">Id</option>
                    </select>
                </div>
                <div class="col-sm">
                    <input class="form-control w-100" type="@(indexSelect == 1 ? "number" : "text")" @bind="criterioDeBusqueda" />
                </div>
                <div class="col-sm text-center">
                    <button class="btn btn-dark border-light" @onclick="FiltarRentas">
                        <i class="oi oi-magnifying-glass" />
                        Buscar
                    </button>
                </div>
            </div>
        </div>
        <div class="card-body table-responsive">
            @if (Rentas == null) {
                <div>
                    <h4>Cargando...</h4>
                </div>
            } else {
                <table class="table table-hover text-nowrap">
                    <thead class="thead-light">
                        <tr>
                            <th>Renta Id</th>
                            <th>Cliente Id</th>
                            <th>Veh&iacute;culo Id</th>
                            <th>D&iacute;as rentados</th>
                            <th>Fecha de renta</th>
                            <th>Monto</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var renta in Rentas) {
                            <tr>
                                <td>@renta.RentaId</td>
                                <td>@renta.ClienteId</td>
                                <td>@renta.VehiculoId</td>
                                <td>@renta.GetDiasRentados()</td>
                                <td>@renta.Fecha</td>
                                <td>@renta.Monto</td>
                                <td><a class="btn btn-outline-dark" href="registro-rentas/@renta.RentaId">Ver</a></td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <th colspan="7">
                                <Paginas CambioPaginacion="CambioPaginacion"
                                         PaginasTotales="PaginasTotales"
                                         Paginacion="PaginacionActual"
                                         Radio="2" />
                            </th>
                        </tr>
                    </tfoot>
                </table>
            }
        </div>
    </div>
</div>


@code {
    [Inject]
    public RentasBLL RentasBLL { get; set; }

    Paginacion PaginacionActual = new Paginacion();
    int RentasTotalesFiltradas;
    Expression<Func<Renta , bool>> expressionFiltrado = c => true;
    int PaginasTotales;

    int indexSelect = 0; //indice actual del select
    string criterioDeBusqueda;

    public List<Renta> Rentas { get; set; }

    protected async override Task OnInitializedAsync() {
        await RefrescarTabla();
    }


    async Task CambioPaginacion() {
        await RefrescarTabla();
    }

    async Task RefrescarTabla() {
        Rentas = await RentasBLL.GetRentas(expressionFiltrado , PaginacionActual);
        RentasTotalesFiltradas = await RentasBLL.Contar(expressionFiltrado);
        GetPaginasTotales();
    }

    void GetPaginasTotales() {
        int paginasTotalesTemp = (int) Math.Ceiling((double) RentasTotalesFiltradas / PaginacionActual.CantidadPorPagina);
        PaginasTotales = paginasTotalesTemp < 1 ? 1 : paginasTotalesTemp;
    }

    void QuitarFiltros() {
        indexSelect = 0;
        criterioDeBusqueda = "";
        _ = FiltarRentas();
    }

    async Task Eliminar(Renta renta) {
        bool eliminado;

        eliminado = await RentasBLL.Eliminar(renta.RentaId);

        if (eliminado) {
            toast.ShowSuccess("Eliminado");
        } else
            toast.ShowError("Error al eliminar");
    }

    async Task FiltarRentas() {

        if (indexSelect == 0) {//Todos
            expressionFiltrado = c => true;

        } else if (indexSelect == 1) {//Id

            if (int.TryParse(criterioDeBusqueda , out int Id)) {
                expressionFiltrado = c => c.RentaId == Id;
            } else {
                expressionFiltrado = c => true;
            }
        }
        PaginacionActual.Pagina = 1;
        await RefrescarTabla();
        StateHasChanged();
    }
}