@page "/consulta-cobros"
@inject AppState AppState
@inject IToastService toast
@attribute [Authorize]

<AuthorizeView>

    <div class="container mt-3">
        <div class="card shadow-lg w-100">
            <div class="card-header bg-dark">
                <div class="form-row">

                    <div class="col-sm">
                        <h3 class="text-light"><i class="fa fa-money-bill mr-3" />Cobros</h3>
                    </div>
                    <div class="col-sm">
                        <a class="btn btn-dark border-light" href="registro-cobros">
                            <i class="oi oi-plus" />
                            Agregar
                        </a>
                    </div>

                    <div class="col-sm">
                        <select @bind="indexSelect" class="custom-select">
                            <option value="0">Filtrar por</option>
                            <option value="1">CobroId</option>
                            <option value="2">VentaId</option>
                        </select>
                    </div>
                    <div class="col-sm">
                        <input class="form-control w-100" type="@(indexSelect == 1 ? "number" : "text")" @bind="criterioDeBusqueda" />
                    </div>
                    <div class="col-sm text-center">
                        <button class="btn btn-dark border-light" @onclick="FiltarCobros">
                            <i class="oi oi-magnifying-glass" />
                            Buscar
                        </button>
                    </div>
                </div>
            </div>
            <div class="card-body table-responsive">
                @if (Cobros == null) {
                    <div>
                        <h4>Cargando...</h4>
                    </div>
                } else {
                    <table class="table table-hover text-nowrap">
                        <thead class="thead-light">
                            <tr>
                                <th>Cobro Id</th>
                                <th>Venta Id</th>
                                <th>Fecha</th>
                                <th>Monto</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var cobro in Cobros) {
                                <tr>
                                    <td>@cobro.CobroId</td>
                                    <td>@cobro.VentaId</td>
                                    <td>@cobro.Fecha</td>
                                    <td>@cobro.Monto.ToString("C")</td>
                                    <td><button @onclick="()=>VerCobro(cobro)" class="btn btn-outline-dark">Ver</button></td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <th colspan="5">
                                    <Paginas CambioPaginacion="CambioPaginacion"
                                             PaginasTotales="PaginasTotales"
                                             Paginacion="PaginacionActual"
                                             Radio="2" />
                                </th>
                            </tr>
                        </tfoot>
                    </table>
                }
            </div>
        </div>
    </div>



    @if (MostraDialogoCobro) {

        <Dialogo Title="Cobro" OnClose="OcultarDialogo">
            <Body>
                <FieldsCobro cobro="cobroEnDialogo" />
            </Body>
            <Footer>
                <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
            </Footer>
        </Dialogo>
    }
</AuthorizeView>


@code {
    [Inject]
    public CobrosBLL CobrosBLL { get; set; }

    bool MostraDialogoCobro = false;

    Paginacion PaginacionActual = new Paginacion();
    int CobrosTotalesFiltrados;
    Expression<Func<Cobro , bool>> expressionFiltrado = c => true;
    int PaginasTotales;

    int indexSelect = 0; //indice actual del select
    string criterioDeBusqueda;

    Cobro cobroEnDialogo;
    public List<Cobro> Cobros { get; set; }

    protected async override Task OnInitializedAsync() {
        await RefrescarTabla();
    }

    async Task CambioPaginacion() {
        await RefrescarTabla();
    }

    async Task RefrescarTabla() {
        Cobros = await CobrosBLL.GetCobros(expressionFiltrado , PaginacionActual);
        CobrosTotalesFiltrados = await CobrosBLL.Contar(expressionFiltrado);
        GetPaginasTotales();
    }

    void GetPaginasTotales() {
        int paginasTotalesTemp = (int) Math.Ceiling((double) CobrosTotalesFiltrados / PaginacionActual.CantidadPorPagina);
        PaginasTotales = paginasTotalesTemp < 1 ? 1 : paginasTotalesTemp;
    }

    async Task VerCobro(Cobro cobro) {
        cobro = await CobrosBLL.Buscar(cobro.CobroId);
        cobroEnDialogo = cobro;
        MostraDialogoCobro = true;
    }

    async Task OcultarDialogo() {
        MostraDialogoCobro = false;
        await RefrescarTabla();
        QuitarFiltros();
    }

    void QuitarFiltros() {
        indexSelect = 0;
        criterioDeBusqueda = "";
        _ = FiltarCobros();
    }

    async Task Eliminar() {
        bool eliminado;

        eliminado = await CobrosBLL.Eliminar(cobroEnDialogo.CobroId);

        if (eliminado) {
            toast.ShowSuccess("Eliminado");
            await OcultarDialogo();
        } else
            toast.ShowError("Error al eliminar");
    }

    async Task FiltarCobros() {

        if (indexSelect == 0) {//Todos
            expressionFiltrado = c => true;

        } else if (indexSelect == 1) {//Id

            if (int.TryParse(criterioDeBusqueda , out int Id)) {
                expressionFiltrado = c => c.CobroId == Id;
            } else {
                expressionFiltrado = c => true;
            }
        } else if (indexSelect == 2) {//Venta
            if (int.TryParse(criterioDeBusqueda , out int Id)) {
                expressionFiltrado = c => c.VentaId == Id;
            } else {
                expressionFiltrado = c => true;
            }
        }
        PaginacionActual.Pagina = 1;
        await RefrescarTabla();
        StateHasChanged();
    }
}