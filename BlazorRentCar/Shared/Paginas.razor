<nav>
    <ul class="pagination justify-content-center w-auto">
        @foreach (var pagina in paginas) {
            <li @onclick="@(() => PaginaSeleccionadaInterno(pagina))"
                style="cursor: pointer;"
                class="page-item @(pagina.Habilitada ? null : "disabled")">
                <span class="btn @(pagina.Activa ? "btn-dark" : "btn-default")">@pagina.Texto</span>
            </li>
        }
        <li class="ml-3 mr-1 btn" style="cursor: unset;">Cantidad por pagina:</li>
        @foreach(var OpcionCantidad in OpcionesCantidad) {
            <li class="page-item" @onclick="()=> CambiarRegistroPorPagina(OpcionCantidad)">
                <span class="btn @(OpcionCantidad.Cantidad == Paginacion.CantidadPorPagina ? "btn-dark" : "btn-default")">@OpcionCantidad.Cantidad</span>
            </li>
        }
    </ul>
</nav>

@code {
    [Parameter] public Paginacion Paginacion { get; set; }
    [Parameter] public int PaginasTotales { get; set; }
    [Parameter] public int Radio { get; set; } = 3;
    [Parameter] public int CantidadOpcionesRegistroPorPagina { get; set; } = 3;
    [Parameter] public EventCallback CambioPaginacion { get; set; }
    List<PaginasModel> paginas = new List<PaginasModel>();
    List<OpcionCantidad> OpcionesCantidad = new List<OpcionCantidad>();

    protected override void OnParametersSet() {
        CargarPaginas();
        CargarOpcionesCantidad();
    }

    private void PaginaSeleccionadaInterno(PaginasModel pagina) {
        if (pagina.Pagina == Paginacion.Pagina) {
            return;
        }

        if (!pagina.Habilitada) {
            return;
        }

        Paginacion.Pagina = pagina.Pagina;
        CambioPaginacion.InvokeAsync(null);

        CargarPaginas();
    }

    private void CargarOpcionesCantidad() {
        OpcionesCantidad = new List<OpcionCantidad>();
        int cantidadInicial = 5;
        for (int i = 1 ; i <= CantidadOpcionesRegistroPorPagina ; i++) {
            OpcionesCantidad.Add(new OpcionCantidad(cantidadInicial * i));
        }
    }

    private void CambiarRegistroPorPagina(OpcionCantidad opcion) {
        Paginacion.Pagina = 1;
        Paginacion.CantidadPorPagina = opcion.Cantidad;
        CambioPaginacion.InvokeAsync(null);
        CargarPaginas();
    }

    private void CargarPaginas() {
        paginas = new List<PaginasModel>();
        var paginaAnteriorHabilitada = Paginacion.Pagina != 1;
        var paginaAnterior = (Paginacion.Pagina == 1) ? 1 : Paginacion.Pagina - 1;
        paginas.Add(new PaginasModel(paginaAnterior , paginaAnteriorHabilitada , "Anterior"));

        for (int i = 1 ; i <= PaginasTotales ; i++) {
            if (i >= Paginacion.Pagina - Radio && i <= Paginacion.Pagina + Radio) {
                paginas.Add(new PaginasModel(i) { Activa = Paginacion.Pagina == i });
            }
        }

        var paginaSiguienteHabilitada = Paginacion.Pagina != PaginasTotales;
        var paginaSiguiente = (Paginacion.Pagina == PaginasTotales) ? PaginasTotales : Paginacion.Pagina + 1;
        paginas.Add(new PaginasModel(paginaSiguiente , paginaSiguienteHabilitada , "Siguiente"));
    }

    class OpcionCantidad {

        public OpcionCantidad(int cantidad) {
            Cantidad = cantidad;
        }

        public int Cantidad { get; set; }
    }

    class PaginasModel {

        public PaginasModel(int pagina)
            : this(pagina , true) { }

        public PaginasModel(int pagina , bool habilitada)
            : this(pagina , habilitada , pagina.ToString()) { }

        public PaginasModel(int pagina , bool habilitada , string texto) {
            Pagina = pagina;
            Habilitada = habilitada;
            Texto = texto;
        }

        public string Texto { get; set; }
        public int Pagina { get; set; }
        public bool Habilitada { get; set; } = true;
        public bool Activa { get; set; } = false;
    }
}